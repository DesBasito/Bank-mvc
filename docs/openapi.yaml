---
openapi: "3.0.1"
info:
  title: "Bank Card Management System API"
  description: "REST API for bank card management with features:\n\n- User authentication\
    \ and authorization\n- Card management (creation, viewing, blocking)\n- Transfers\
    \ between cards\n- System administration\n\n**User Roles:**\n- USER: basic operations\
    \ with own cards\n- ADMIN: full system access\n\n**Security:**\n- Basic Authentication\
    \ (username/password)\n- Card number encryption\n- Sensitive data masking\n"
  contact:
    name: "Abu"
    url: "https://github.com/DesBasito"
    email: "out1of1mind1exception@gmail.com"
  version: "1.0.0"
servers:
- url: "http://localhost:8080/api/v1"
  description: "Local development server"
security:
- Basic Authentication: []
tags:
- name: "Transactions"
  description: "Operations with transfers between cards"
- name: "Card Applications"
  description: "Card application management"
- name: "Cards"
  description: "Bank card management operations"
- name: "User Management"
  description: "Administrative operations with users"
- name: "Card Block Requests"
  description: "Management of bank card block requests"
paths:
  /api/v1/transactions/{id}/refund:
    put:
      tags:
      - "Transactions"
      summary: "Refund transaction by ID"
      operationId: "toggleTransaction"
      parameters:
      - name: "id"
        in: "path"
        description: "Transaction ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Transaction rolled back successfully!"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TransactionDto"
        "404":
          description: "Transaction not found!"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseVoid"
        "403":
          description: "Access denied for this transaction!"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseVoid"
      security:
      - Basic Authentication: []
  /api/v1/cards/{id}/toggle:
    put:
      tags:
      - "Cards"
      summary: "Change card status (admin)"
      description: "Change card status by administrator"
      operationId: "toggleCard"
      parameters:
      - name: "id"
        in: "path"
        description: "card ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseVoid"
      security:
      - Basic Authentication: []
      - Bearer Authentication: []
  /api/v1/card-applications/{id}/cancel:
    put:
      tags:
      - "Card Applications"
      summary: "Cancel application"
      description: "Cancel application by user (only in PENDING status)"
      operationId: "cancelApplication"
      parameters:
      - name: "id"
        in: "path"
        description: "Application ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseVoid"
      security:
      - Basic Authentication: []
  /api/v1/users/{id}/toggle-status:
    post:
      tags:
      - "User Management"
      summary: "Toggle user status"
      description: "Enable or disable user account"
      operationId: "toggleUserStatus"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
      security:
      - Basic Authentication: []
  /api/v1/transactions/transfer:
    post:
      tags:
      - "Transactions"
      summary: "Transfer between own cards"
      description: "Transfer funds between current user's cards"
      operationId: "transferBetweenMyCards"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
        required: true
      responses:
        "200":
          description: "Transfer completed successfully"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TransactionDto"
        "400":
          description: "Invalid transfer data"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseVoid"
        "403":
          description: "Card does not belong to user"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseVoid"
      security:
      - Basic Authentication: []
  /api/v1/card-block-requests:
    post:
      tags:
      - "Card Block Requests"
      summary: "Create card block request"
      description: "Creating a request to block own card by user"
      operationId: "createBlockRequest"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardBlockRequestCreateDto"
        required: true
      responses:
        "400":
          description: "Invalid data or card is already blocked"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "403":
          description: "No access to this card"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "200":
          description: "Block request created successfully"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - Basic Authentication: []
  /api/v1/card-block-requests/{id}/reject:
    post:
      tags:
      - "Card Block Requests"
      summary: "Reject block request (admin)"
      description: "Reject block request by administrator"
      operationId: "rejectBlockRequest"
      parameters:
      - name: "id"
        in: "path"
        description: "Block request ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "adminComment"
        in: "query"
        description: "Administrator comment (rejection reason)"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseVoid"
      security:
      - Basic Authentication: []
  /api/v1/card-block-requests/{id}/cancel:
    post:
      tags:
      - "Card Block Requests"
      summary: "Cancel block request"
      description: "Cancel block request by user (only in PENDING status)"
      operationId: "cancelBlockRequest"
      parameters:
      - name: "id"
        in: "path"
        description: "Block request ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseVoid"
      security:
      - Basic Authentication: []
  /api/v1/card-block-requests/{id}/approve:
    post:
      tags:
      - "Card Block Requests"
      summary: "Approve block request (admin)"
      description: "Approve block request and block the card"
      operationId: "approveBlockRequest"
      parameters:
      - name: "id"
        in: "path"
        description: "Block request ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "adminComment"
        in: "query"
        description: "Administrator comment"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "Request approved, card blocked"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardBlockRequestDto"
        "400":
          description: "Request already processed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardBlockRequestDto"
      security:
      - Basic Authentication: []
  /api/v1/card-applications:
    post:
      tags:
      - "Card Applications"
      summary: "Create card application"
      description: "Creating a new card application by user"
      operationId: "createApplication"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardApplicationRequest"
        required: true
      responses:
        "400":
          description: "Bad request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "200":
          description: "Application created successfully"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
      - Basic Authentication: []
  /api/v1/card-applications/{id}/reject:
    post:
      tags:
      - "Card Applications"
      summary: "Reject application (admin)"
      description: "Reject application by administrator"
      operationId: "rejectApplication"
      parameters:
      - name: "id"
        in: "path"
        description: "Application ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "reason"
        in: "query"
        description: "Rejection reason"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseVoid"
      security:
      - Basic Authentication: []
  /api/v1/card-applications/{id}/approve:
    post:
      tags:
      - "Card Applications"
      summary: "Approve application (admin)"
      description: "Approve application and create card"
      operationId: "approveApplication"
      parameters:
      - name: "id"
        in: "path"
        description: "Application ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Application already processed"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ApiResponseVoid"
        "200":
          description: "Application approved, card created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
      security:
      - Basic Authentication: []
  /api/v1/users/{id}:
    delete:
      tags:
      - "User Management"
      summary: "Delete user"
      description: "Delete user from system"
      operationId: "deleteUser"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "User deleted"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Cannot delete user with active cards"
          content:
            '*/*':
              schema:
                type: "string"
      security:
      - Basic Authentication: []
components:
  schemas:
    TransactionDto:
      required:
      - "amount"
      - "createdAt"
      - "status"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID транзакции"
          format: "int64"
        fromCardId:
          type: "integer"
          description: "ID карты отправителя"
          format: "int64"
        fromCardNumber:
          type: "string"
          description: "Маскированный номер карты отправителя"
        toCardId:
          type: "integer"
          description: "ID карты получателя"
          format: "int64"
        toCardNumber:
          type: "string"
          description: "Маскированный номер карты получателя"
        amount:
          type: "number"
          description: "Сумма транзакции"
        description:
          type: "string"
          description: "Описание транзакции"
        status:
          type: "string"
          description: "Статус транзакции"
          enum:
          - "SUCCESS"
          - "CANCELLED"
          - "REFUNDED"
        createdAt:
          type: "string"
          description: "Дата создания транзакции"
        processedAt:
          type: "string"
          description: "Дата обработки транзакции"
        errorMessage:
          type: "string"
          description: "Сообщение об ошибке (если есть)"
      description: "Информация о транзакции"
    ApiResponseVoid:
      type: "object"
      properties:
        success:
          type: "boolean"
        message:
          type: "string"
        data:
          type: "object"
    TransferRequest:
      required:
      - "amount"
      - "fromCardId"
      - "toCardId"
      type: "object"
      properties:
        fromCardId:
          type: "integer"
          description: "ID карты отправителя"
          format: "int64"
          example: 1
        toCardId:
          type: "integer"
          description: "ID карты получателя"
          format: "int64"
          example: 2
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: "number"
          description: "Сумма перевода"
          example: 1500.5
        description:
          maxLength: 500
          minLength: 0
          type: "string"
          description: "Описание перевода"
          example: "Перевод на другую карту"
      description: "Запрос на перевод между картами"
    CardBlockRequestCreateDto:
      required:
      - "cardId"
      - "reason"
      type: "object"
      properties:
        cardId:
          type: "integer"
          description: "Card ID to block"
          format: "int64"
          example: 1
        reason:
          maxLength: 50
          minLength: 0
          type: "string"
          description: "Block reason"
          example: "LOST"
          enum:
          - "LOST"
          - "STOLEN"
          - "COMPROMISED"
          - "SUSPICIOUS"
          - "OTHER"
      description: "Card block request creation"
    ApiResponse:
      type: "object"
      properties:
        success:
          type: "boolean"
        message:
          type: "string"
        data:
          type: "object"
    CardBlockRequestDto:
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID запроса"
          format: "int64"
        cardId:
          type: "integer"
          description: "ID карты"
          format: "int64"
        cardNumber:
          type: "string"
          description: "Номер карты (маскированный)"
        userId:
          type: "integer"
          description: "ID пользователя"
          format: "int64"
        userName:
          type: "string"
          description: "Имя пользователя"
        reason:
          type: "string"
          description: "Причина блокировки"
        status:
          type: "string"
          description: "Статус запроса"
          enum:
          - "PENDING"
          - "APPROVED"
          - "REJECTED"
        adminComment:
          type: "string"
          description: "Комментарий администратора"
        createdAt:
          type: "string"
          description: "Дата создания запроса"
        processedAt:
          type: "string"
          description: "Дата обработки запроса"
      description: "Запрос на блокировку карты"
    CardApplicationRequest:
      required:
      - "cardType"
      type: "object"
      properties:
        cardType:
          type: "string"
          description: "Тип карты"
          example: "DEBIT"
          enum:
          - "DEBIT"
          - "CREDIT"
          - "VIRTUAL"
          - "PREPAID"
        comment:
          type: "string"
          description: "Комментарий к заявке"
          example: "Основная карта для зарплаты"
      description: "Запрос на создание карты"
    CardDto:
      required:
      - "balance"
      - "cardNumber"
      - "createdAt"
      - "expiryDate"
      - "ownerName"
      - "status"
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        cardNumber:
          type: "string"
        ownerName:
          type: "string"
        ownerId:
          type: "integer"
          format: "int64"
        expiryDate:
          type: "string"
          format: "date"
        status:
          type: "string"
        type:
          type: "string"
        balance:
          type: "number"
        createdAt:
          type: "string"
        updatedAt:
          type: "string"
  securitySchemes:
    Basic Authentication:
      type: "http"
      description: "Basic Authentication"
      scheme: "basic"
